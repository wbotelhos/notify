// http://www.jshint.com/docs/options

{
  "asi"           : false,    // true: Tolerate Automatic Semicolon Insertion (no semicolons)
  "bitwise"       : true,     // * Prohibit bitwise operators (&, |, ^, etc.)
  "boss"          : false,    // * Tolerate assignments where comparisons would be expected
  "browser"       : true,     // Web Browser (window, document, etc)
  "camelcase"     : true,     // * Identifiers must be in camelCase
  "couch"         : false,    // CouchDB
  "curly"         : true,     // true: Require {} for every new block or scope
  "debug"         : false,    // true: Allow debugger statements e.g. browser breakpoints.
  "devel"         : true,     // Development/debugging (alert, confirm, etc)
  "dojo"          : false,    // Dojo Toolkit
  "eqeqeq"        : true,     // * Require triple equals (===) for comparison
  "eqnull"        : false,    // true: Tolerate use of `== null`
  "es5"           : false,    // true: Allow ES5 syntax (ex: getters and setters)
  "esnext"        : false,    // true: Allow ES.next (ES6) syntax (ex: `const`)
  "evil"          : false,    // true: Tolerate use of `eval` and `new Function()`
  "expr"          : false,    // true: Tolerate `ExpressionStatement` as Programs
  "forin"         : true,     // true: Require filtering for..in loops with obj.hasOwnProperty()
  "funcscope"     : false,    // true: Tolerate defining variables inside control statements"
  "globals"       : {         // additional predefined global variables
    "$"                     : true,
    "afterEach"             : true,
    "beforeEach"            : true,
    "context"               : true,
    "describe"              : true,
    "expect"                : true,
    "it"                    : true,
    "jasmine"               : true,
    "jQuery"                : true,
    "mostRecentAjaxRequest" : true,
    "spyOn"                 : true,
    "xit"                   : true,

    "Notify"                : true
  },
  "globalstrict"  : false,    // true: Allow global "use strict" (also enables 'strict')
  "immed"         : false,    // true: Require immediate invocations to be wrapped in parens e.g. `(function () { } ());`
  "indent"        : 2,        // * Number of spaces to use for indentation
  "iterator"      : false,    // true: Tolerate using the `__iterator__` property
  "jquery"        : false,    // jQuery
  "lastsemic"     : false,    // true: Tolerate omitting a semicolon for the last statement of a 1-line block
  "latedef"       : true,     // * Require variables/functions to be defined before being used
  "laxbreak"      : false,    // true: Tolerate possibly unsafe line breakings
  "laxcomma"      : false,    // true: Tolerate comma-first style coding
  "loopfunc"      : false,    // true: Tolerate functions being defined in loops
  "maxcomplexity" : 5,        // * Max cyclomatic complexity per function
  "maxdepth"      : false,    // {int} Max depth of nested blocks (within functions)
  "maxerr"        : 50,       // {int} Maximum error before stopping
  "maxlen"        : false,    // * Max number of characters per line
  "maxparams"     : false,    // {int} Max number of formal params allowed per function
  "maxstatements" : false,    // {int} Max number statements per function
  "mootools"      : false,    // MooTools
  "moz"           : false,    // true: Allow Mozilla specific syntax (extends and overrides esnext features)                               // (ex: `for each`, multiple try/catch, function expressionâ€¦)
  "multistr"      : false,    // true: Tolerate multi-line strings
  "newcap"        : true,     // * Require capitalization of all constructor functions e.g. `new F()`
  "noarg"         : true,     // true: Prohibit use of `arguments.caller` and `arguments.callee`
  "node"          : true,     // * Support Node.
  "noempty"       : true,     // * Prohibit use of empty blocks
  "nomen"         : false,    // true: Prohibit dangling `_` in variables
  "nonew"         : false,    // true: Prohibit use of constructors for side-effects (without assignment)
  "nonstandard"   : false,    // Widely adopted globals (escape, unescape, etc)
  "onevar"        : false,    // true: Allow only one `var` statement per function
  "passfail"      : false,    // true: Stop on first error
  "plusplus"      : false,    // true: Prohibit use of `++` & `--`
  "proto"         : false,    // true: Tolerate using the `__proto__` property
  "prototypejs"   : false,    // Prototype and Scriptaculous
  "quotmark"      : "single", //
  "rhino"         : false,    // Rhino
  "scripturl"     : false,    // true: Tolerate script-targeted URLs
  "shadow"        : false,    // true: Allows re-define variables later in code e.g. `var x=1; x=2;`
  "smarttabs"     : false,    // * Tolerate mixed tabs/spaces when used for alignment
  "strict"        : true,     // true: Requires all functions run in ES5 Strict Mode
  "sub"           : false,    // true: Tolerate using `[]` notation when it can still be expressed in dot notation
  "supernew"      : false,    // true: Tolerate `new function () { ... };` and `new Object;`
  "trailing"      : true,     // * Prohibit trailing whitespaces
  "undef"         : true,     // * Require all non-global variables to be declared (prevents global leaks)
  "unused"        : true,     // * Require all defined variables be used
  "validthis"     : false,    // true: Tolerate using this in a non-constructor function
  "white"         : false,    // true: Check against strict whitespace and indentation rules
  "worker"        : false,    // Web Workers
  "wsh"           : false,    // Windows Scripting Host
  "yui"           : false     // Yahoo User Interface
}
